### global variables >> ###


####### >> filename and directory >> #######
## D.SRC    - source  directory
## D.OBJ    - object  directory
## D.BIN    - binary  derectory
## D.LIB    - library directory
####### << filename and directory << #######


####### >> filename and extensions >> #######
## X        - extensions properties
## X.HXX    - c++ header extension
## X.CXX    - c++ source extension
## X.OXX    - c++ object extension
## X.PXX    - toluaxx source extension
## X.DLL    - dynamic link library extension
## X.RUN    - runable file extension
####### << filename and extensions << #######


####### >> utilites >> #######
## U        - utily properties
## U.EX     - exec call   {$(1)-command}
## U.EH     - echo call   {$(1)-string}
## U.EF     - echo to file call {$(1)-string,$(2)-filename}
## U.RM     - remove call {$(1)-files}
## U.CP     - copy call   {$(1)-from|files,to|file}
## U.MD     - mkdir call  {$(1)-name}
## U.RD     - rmdir call  {$(1)-name}
## U.B      - baks and temps patterns
## U.P      - proper call {$(1)-module}
####### << utilites << #######


####### >> toluaxx >> #######
## P        - integrate preprocessor properties
## P.XX     - preprocessor call          {$(1)-input source, $(2)-output object, $(3)-options}
## P.S      - integrate source call      {$(1)-module,$(2)-source}
## P.O      - integrate object call      {$(1)-module,$(2)-source}
## P.FLAGS  - global preprocessor options
## P.FLAGS.DEBUG   - debug   preprocessor options
## P.FLAGS.RELEASE - release preprocessor options
####### << toluaxx << #######


####### >> compiler >> #######
## C        - compiler properties
## C.XX     - compiler call              {$(1)-input source, $(2)-output object, $(3)-options}
## C.S      - source call                {$(1)-module,$(2)-source}
## C.O      - full object call           {$(1)-module,$(2)-object}
## C.OO     - only object call           {$(1)-object}
## C.I      - include path call          {$(1)-include paths}
## C.I.path - global include paths
## C.FLAGS  - global compiler options
## C.FLAGS.DEBUG   - debug compiler options
## C.FLAGS.RELEASE - release compiler options
## C.FLAGS.OPTIM.* - optimization flags
## C.FLAGS.OPTIM.DISABLE - don't optimize
## C.FLAGS.OPTIM.ENSPEED - optimize for speed
## C.FLAGS.OPTIM.ENSIZE  - optimize for size
####### << compiler << #######


####### >> linker >> #######
## L        - linker options
## L.XX     - linker call                {$(1)-input objects, $(2)-output file, $(3)-options}
## L.SO     - link library name out call {$(1)-library}
## L.RO     - link runable name out call {$(1)-runable}
## L.L      - link path call             {$(1)-link paths}
## L.l      - link library call          {$(1)-libraries} 
## L.d      - link library name in call  {$(1)-library}
## L.L.path - global link paths
## L.l.name - global libs names
## L.OPTS   - global linker options
####### << linker << #######


####### >> module local >> #######
## $(1)     - module name (or src/{sub directory})
## $(1).var - module properties
####### << module local << #######


### << global variables ###

U.B=*~ *.bak *.cache
U.T=$(addprefix $(D.SRC)/$(1)/,$(U.B))

###### >> directories >> #######
D.SRC=src
D.OBJ=obj
D.RUN=bin
D.LIB=lib
###### << directories << #######

###### >> extensions >> #######
X.HXX=.hxx
X.CXX=.cxx
X.OXX=.oxx
X.PXX=.pxx
###### << extensions << #######

###### >> compile patterns >> #######
C.H=$(addprefix $(D.SRC)/$(1)/,$(addsuffix $(X.HXX),$(2)))
C.S=$(addprefix $(D.SRC)/$(1)/,$(addsuffix $(X.CXX),$(2)))
C.O=$(addprefix $(D.OBJ)/$(1).,$(addsuffix $(X.OXX),$(2)))
C.OO=$(addprefix $(D.OBJ)/,$(addsuffix $(X.OXX),$(1)))
C.I.path+=./include/lunique
###### << compile patterns << #######

###### >> link patterns >> #######
L.SO=$(addprefix $(D.LIB)/,$(addsuffix $(X.DLL),$(1)))
L.RO=$(addprefix $(D.RUN)/,$(addsuffix $(X.RUN),$(1)))
L.L.path+=$(D.LIB)
###### << link patterns << #######


